/**********************************************************ADOBE SYSTEMS INCORPORATED Copyright 2005-2010 Adobe Systems Incorporated All Rights Reserved NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the termsof the Adobe license agreement accompanying it.  If you have received this file from a source other than Adobe, then your use, modification,or distribution of it requires the prior written permission of Adobe. *********************************************************//********************************************************** Save as PDFs.jsxDESCRIPTIONThis sample gets files specified by the user from the selected folder and batch processes them and saves them as PDFs in the user desired destination with the same file name. **********************************************************/// Main Code [Execution of script begins here]// uncomment to suppress Illustrator warning dialogs// app.userInteractionLevel = UserInteractionLevel.DONTDISPLAYALERTS;var destFolder, sourceFolder, files, fileType, sourceDoc, targetFile, pdfSaveOpts;// Select the source folder.sourceFolder = Folder.selectDialog( 'Select the folder with Illustrator files you want to convert to PDF', '' );// If a valid folder is selectedif ( sourceFolder != null ){	files = new Array();	//fileType = prompt( 'Select type of Illustrator files to you want to process. Eg: *.ai', ' ' );	fileType = '*.emf';    	// Get all files matching the pattern	files = sourceFolder.getFiles( fileType );		if ( files.length > 0 )	{		// Get the destination to save the files		destFolder = Folder.selectDialog( 'Select the folder where you want to save the converted PDF files.', '' );		for ( i = 0; i < files.length; i++ )		{			sourceDoc = app.open(files[i]); // returns the document object												// Call function getNewName to get the name and file to save the pdf			targetFile = getNewName();						// Call function getPDFOptions get the PDFSaveOptions for the files			//saveOptions = getSVGOptions( );                         sourceDoc.selectObjectsOnActiveArtboard();             sourceDoc.selection.stroke             sourceDoc.cropBox = sourceDoc.geometricBounds;                         paths = sourceDoc.selection[0].pathItems;             for ( j = 0; j < paths.length; j++) {                    var myPath = paths[j];                    myPath.stroked = true;                    myPath.strokeWidth = 1;                    if ( j > 0) {                        var a1 = myPath.pathPoints[0];                        var a2 = myPath.pathPoints[1];                        var b1 = paths[j-1].pathPoints[0];                        var b2 = paths[j-1].pathPoints[1];                        if (                               (a1[0] == b1[0] && a1[1] == b1[1])                            || (a1[0] == b2[0] && a1[1] == b2[1])                            || (a2[0] == b1[0] && a2[1] == b1[1])                            || (a2[0] == b2[0] && a2[1] == b2[1])                        ) { //                          alert(1);                        }                    }             }                        			// Save as SVG			sourceDoc.exportFile( targetFile, ExportType.SVG );			sourceDoc.close();		}		alert( 'Files are saved as PDF in ' + destFolder );	}	else	{		alert( 'No matching files found' );	}}/*********************************************************getNewName: Function to get the new file name. The primaryname is the same as the source file.**********************************************************/function getNewName(){	var ext, docName, newName, saveInFile, docName;	docName = sourceDoc.name;	ext = '.svg'; // new extension for pdf file	newName = "";			for ( var i = 0 ; docName[i] != "." ; i++ )	{		newName += docName[i];	}	newName += ext; // full pdf name of the file		// Create a file object to save the pdf	saveInFile = new File( destFolder + '/' + newName );		return saveInFile;}